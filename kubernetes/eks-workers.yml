Description: Udacity NanoDegree Capstone Project - Amazon EKS Worker Nodes

Mappings:
  ServicePrincipals:
    aws-cn:
      ec2: ec2.amazonaws.com.cn
    aws:
      ec2: ec2.amazonaws.com

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - ClusterName
      - Label:
          default: Worker Node Configuration
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredCapacity
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - NodeImageIdSSMParam
          - NodeImageId
          - NodeVolumeSize
          - KeyName
          - BootstrapArguments
      - Label:
          default: Worker Network Configuration
        Parameters:
          - VpcId
          - Subnets

Parameters:
  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"
  
  ClusterName:
    Type: String
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: The EC2 Key Pair to allow SSH access to the instances

  StackName:
    Description: A stack name that will be prefixed to resource names
    Type: String
  
  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 3
    Description: Desired capacity of Node Group ASG.

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG.

  NodeGroupName:
    Type: String
    Description: Unique identifier for the Node Group.

  NodeImageId:
    Type: String
    Default: ""
    Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.medium
   
  NodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size

Resources:
    NodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        Path: "/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

    NodeInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
          - !Ref NodeInstanceRole
  
    NodeSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for all nodes in the cluster
        VpcId: 
            Fn::ImportValue: !Sub ${StackName}-VPCID
        Tags:
          - Key: !Sub kubernetes.io/cluster/${ClusterName}
            Value: owned
  
    NodeSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow node to communicate with each other
        GroupId: !Ref NodeSecurityGroup
        SourceSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: -1
        FromPort: 0
        ToPort: 65535

    ClusterControlPlaneSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow pods to communicate with the cluster API Server
        GroupId: 
            Fn::ImportValue: !Sub ${StackName}-CPSG
        SourceSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
  
    ControlPlaneEgressToNodeSecurityGroup:
      Type: AWS::EC2::SecurityGroupEgress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow the cluster control plane to communicate with worker Kubelet and pods
        GroupId:
            Fn::ImportValue: !Sub ${StackName}-CPSG
        DestinationSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535
  
    ControlPlaneEgressToNodeSecurityGroupOn443:
      Type: AWS::EC2::SecurityGroupEgress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
        GroupId: 
            Fn::ImportValue: !Sub ${StackName}-CPSG
        DestinationSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443

    NodeSecurityGroupFromControlPlaneIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
        GroupId: !Ref NodeSecurityGroup
        SourceSecurityGroupId: 
            Fn::ImportValue: !Sub ${StackName}-CPSG
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535 

    NodeSecurityGroupFromControlPlaneOn443Ingress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
        GroupId: !Ref NodeSecurityGroup
        SourceSecurityGroupId: 
            Fn::ImportValue: !Sub ${StackName}-CPSG
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443

    NodeLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        AssociatePublicIpAddress: "true"
        IamInstanceProfile: !Ref NodeInstanceProfile
        ImageId: !Ref NodeImageId
        InstanceType: !Ref NodeInstanceType
        KeyName: !Ref KeyName
        SecurityGroups:
          - !Ref NodeSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp2
              DeleteOnTermination: true
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
              /opt/aws/bin/cfn-signal --exit-code $? \
                       --stack  ${AWS::StackName} \
                       --resource NodeGroup  \
                       --region ${AWS::Region}

    NodeGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
        LaunchConfigurationName: !Ref NodeLaunchConfig
        MinSize: !Ref NodeAutoScalingGroupMinSize
        MaxSize: !Ref NodeAutoScalingGroupMaxSize
        VPCZoneIdentifier:
          Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::Sub: ${StackName}-SNIDS
        Tags:
          - Key: Name
            Value: !Sub ${ClusterName}-${NodeGroupName}-Node
            PropagateAtLaunch: "true"
          - Key: !Sub kubernetes.io/cluster/${ClusterName}
            Value: owned
            PropagateAtLaunch: "true"
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MaxBatchSize: 1
          MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
          PauseTime: PT5M
  
Outputs:

    NodeInstanceRole:
        Description: The node instance role
        Value: !GetAtt NodeInstanceRole.Arn
        Export:
          Name: !Sub ${StackName}--NodeInstanceRole

    NodeSecurityGroup:
        Description: The security group for the node group
        Value: !Ref NodeSecurityGroup
        Export:
            Name: !Sub ${StackName}--NodeSecurityGroup

    NodeAutoScalingGroup:
        Description: The autoscaling group
        Value: !Ref NodeGroup
        Export:
            Name: !Sub ${StackName}--NodeAutoScalingGroup